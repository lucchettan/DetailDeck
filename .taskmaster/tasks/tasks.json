{
  "master": {
    "tasks": [
      {
        "id": 7,
        "title": "Simplify Reservation Configuration Options",
        "description": "Refactor the reservation configuration UI to remove the 12-month option and improve clarity of the remaining options with better labeling.",
        "details": "1. Locate the reservation configuration component in the onboarding flow\n2. Remove the '12 months' option from the selection dropdown/radio buttons\n3. Reword the reservation period question to 'Quel est la date de réservation maximum pour un client?'\n4. Review and improve all option labels for clarity\n5. Update any related validation logic\n6. Ensure the data model still supports the modified options\n\nComponent path likely in: `/src/components/onboarding/ShopInfoStep.tsx` or similar\n\nExample implementation:\n```tsx\n// Before\n<SelectField\n  label=\"Délai de réservation\"\n  options={[\n    { value: '1', label: '1 mois' },\n    { value: '3', label: '3 mois' },\n    { value: '6', label: '6 mois' },\n    { value: '12', label: '12 mois' } // Remove this option\n  ]}\n  value={reservationPeriod}\n  onChange={handleReservationPeriodChange}\n/>\n\n// After\n<SelectField\n  label=\"Quel est la date de réservation maximum pour un client?\"\n  options={[\n    { value: '1', label: 'Jusqu'à 1 mois à l'avance' },\n    { value: '3', label: 'Jusqu'à 3 mois à l'avance' },\n    { value: '6', label: 'Jusqu'à 6 mois à l'avance' }\n  ]}\n  value={reservationPeriod}\n  onChange={handleReservationPeriodChange}\n/>\n```\n<info added on 2025-09-29T18:06:07.408Z>\nComponent path correction: The reservation configuration component is located in `/src/components/onboarding/ScheduleStep.tsx` instead of ShopInfoStep.tsx as initially thought.\n\nCurrent implementation in ScheduleStep.tsx:\n```tsx\n<SelectField\n  label=\"Horizon maximum de réservation\"\n  options={[\n    { value: '1', label: '1 semaine' },\n    { value: '4', label: '4 semaines' },\n    { value: '8', label: '8 semaines' },\n    { value: '12', label: '12 semaines' } // This option should be removed\n  ]}\n  value={reservationPeriod}\n  onChange={handleReservationPeriodChange}\n/>\n```\n\nThe updated implementation should:\n1. Remove the \"12 semaines\" option\n2. Change the label to \"Quel est la date de réservation maximum pour un client?\"\n3. Improve option labels for clarity with \"à l'avance\" wording\n</info added on 2025-09-29T18:06:07.408Z>",
        "testStrategy": "1. Unit test the component to verify the 12-month option is removed\n2. Verify the new wording appears correctly\n3. Test that selecting each option correctly saves the right value\n4. Ensure existing users with '12 months' selected are properly migrated to '6 months'\n5. Conduct user testing to confirm the new labels are more intuitive",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Automatic Scroll Between Onboarding Steps",
        "description": "Add automatic scrolling functionality to ensure users are always positioned at the top of the page when navigating between onboarding steps.",
        "details": "1. Identify the component responsible for step navigation (likely a stepper or wizard component)\n2. Implement a scroll-to-top function that executes when the step changes\n3. Use React's useEffect hook to trigger the scroll when the current step changes\n\nImplementation example:\n```tsx\n// In the main onboarding component\nimport { useEffect } from 'react';\n\nfunction OnboardingWizard() {\n  const [currentStep, setCurrentStep] = useState(1);\n  \n  // Add this effect to handle scrolling\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [currentStep]);\n  \n  const handleNextStep = () => {\n    setCurrentStep(prev => prev + 1);\n    // Scroll is handled by the effect\n  };\n  \n  // Rest of component\n}\n```\n\nAlternatively, if using a router for steps:\n```tsx\n// In a navigation component\nimport { useLocation } from 'react-router-dom';\n\nfunction OnboardingNavigation() {\n  const location = useLocation();\n  \n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [location.pathname]);\n  \n  // Rest of component\n}\n```",
        "testStrategy": "1. Write unit tests to verify the scroll function is called when steps change\n2. Manually test the navigation between all steps to ensure smooth scrolling\n3. Test on different devices and screen sizes to ensure consistent behavior\n4. Verify there are no visual glitches during the scroll animation\n5. Test with keyboard navigation and screen readers for accessibility",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Remove Redundant Text Content",
        "description": "Clean up duplicate text that appears in both headers and main content sections throughout the onboarding flow.",
        "details": "1. Audit all onboarding components to identify redundant text (header vs. main content)\n2. Remove duplicate text instances, keeping only the text in the main content sections\n3. Ensure the removal doesn't affect the visual hierarchy or user understanding\n\nComponents to check:\n- ShopInfoStep\n- VehicleSizesStep\n- CategoriesStep\n- ServicesStep\n\nExample implementation:\n```tsx\n// Before\nfunction ShopInfoStep() {\n  return (\n    <div>\n      <header>\n        <h1>Information sur votre entreprise</h1>\n        <p>Renseignez les détails de votre entreprise</p> {/* Redundant */}\n      </header>\n      \n      <main>\n        <h2>Information sur votre entreprise</h2>\n        <p>Renseignez les détails de votre entreprise</p> {/* Keep this one */}\n        {/* Form fields */}\n      </main>\n    </div>\n  );\n}\n\n// After\nfunction ShopInfoStep() {\n  return (\n    <div>\n      <header>\n        <h1>Information sur votre entreprise</h1>\n      </header>\n      \n      <main>\n        <h2>Information sur votre entreprise</h2>\n        <p>Renseignez les détails de votre entreprise</p>\n        {/* Form fields */}\n      </main>\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Perform a visual regression test to ensure the UI still looks balanced after text removal\n2. Review each page with stakeholders to confirm the content hierarchy is maintained\n3. Verify that all necessary information is still present\n4. Test with different screen sizes to ensure responsive behavior is maintained\n5. Conduct user testing to confirm the simplified content improves readability",
        "priority": "low",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Enhance Service Display with Categorized Cards",
        "description": "Redesign the service listing to display services as visual cards organized by category, similar to the catalog view.",
        "details": "1. Identify the current service listing component in the onboarding flow\n2. Create or reuse card components for service display\n3. Group services by category\n4. Implement a grid layout using Tailwind CSS\n5. Ensure the cards display all relevant service information\n\nImplementation example:\n```tsx\nimport { groupBy } from 'lodash'; // or implement your own grouping function\n\nfunction ServicesDisplay({ services }) {\n  // Group services by category\n  const servicesByCategory = groupBy(services, 'categoryId');\n  \n  return (\n    <div>\n      {Object.entries(servicesByCategory).map(([categoryId, categoryServices]) => {\n        const category = categories.find(c => c.id === categoryId);\n        \n        return (\n          <div key={categoryId} className=\"mb-8\">\n            <h3 className=\"text-xl font-semibold mb-4\">{category?.name || 'Uncategorized'}</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {categoryServices.map(service => (\n                <div key={service.id} className=\"bg-white rounded-lg shadow p-4 hover:shadow-md transition-shadow\">\n                  <h4 className=\"font-medium\">{service.name}</h4>\n                  <p className=\"text-gray-600 text-sm\">{service.description}</p>\n                  <div className=\"mt-2 flex justify-between items-center\">\n                    <span className=\"font-bold\">{service.price}€</span>\n                    <span className=\"text-sm text-gray-500\">{service.duration} min</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n```\n<info added on 2025-09-29T18:06:59.938Z>\nCurrent implementation location identified in ServiceEditorOnboarding.tsx (lines 527-555). The service listing currently uses a basic vertical list format that displays service name, description, price, duration, and category. This needs to be replaced with the categorized card display as specified in the task.\n\nThe implementation should target this specific file and replace the current list view with the new card-based categorized layout. When implementing, ensure to maintain all existing service information while reorganizing the display into the card format grouped by categories.\n</info added on 2025-09-29T18:06:59.938Z>",
        "testStrategy": "1. Unit test the grouping logic to ensure services are correctly categorized\n2. Test the component with various service data sets (empty, one category, multiple categories)\n3. Verify responsive behavior across different screen sizes\n4. Test with a large number of services to ensure performance\n5. Verify that all service information is correctly displayed\n6. Conduct user testing to confirm the new display is more intuitive",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Fix Activity Zones Persistence",
        "description": "Correct the issue where activity zones selected during onboarding are not being properly saved to the database.",
        "details": "1. Identify the component handling activity zones selection\n2. Debug the data flow from selection to database storage\n3. Fix the database save operation for activity zones\n4. Ensure proper error handling\n5. Add validation to prevent empty submissions\n\nPotential issues to check:\n- Form submission might not include activity zones data\n- API endpoint might not process activity zones correctly\n- Database schema might need adjustment\n- Transaction might be failing silently\n\nImplementation example:\n```tsx\n// In the activity zones component\nconst saveActivityZones = async (shopId, selectedZones) => {\n  try {\n    // Ensure we have zones to save\n    if (!selectedZones.length) {\n      throw new Error('No activity zones selected');\n    }\n    \n    // Format data for Supabase\n    const zonesData = selectedZones.map(zoneId => ({\n      shop_id: shopId,\n      zone_id: zoneId,\n      created_at: new Date().toISOString()\n    }));\n    \n    // Save to database\n    const { data, error } = await supabase\n      .from('shop_activity_zones')\n      .upsert(zonesData, { onConflict: ['shop_id', 'zone_id'] });\n      \n    if (error) throw error;\n    \n    console.log('Activity zones saved successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Failed to save activity zones:', error);\n    throw error;\n  }\n};\n```\n\nAlso check if the zones are being loaded correctly in the profile:\n```tsx\nconst loadActivityZones = async (shopId) => {\n  try {\n    const { data, error } = await supabase\n      .from('shop_activity_zones')\n      .select('zone_id')\n      .eq('shop_id', shopId);\n      \n    if (error) throw error;\n    \n    return data.map(item => item.zone_id);\n  } catch (error) {\n    console.error('Failed to load activity zones:', error);\n    return [];\n  }\n};\n```\n<info added on 2025-09-29T18:13:23.030Z>\n## Updated Investigation Findings\n\nFound the activity zones handling in ShopInfoStep.tsx. The service zones are managed in the form state and saved to the database in the handleSave function (line 140: service_zones: formData.isMobile ? formData.serviceZones : null). The logic appears correct, but need to investigate if there's an issue with the database schema or data persistence. The zones are stored as JSONB in the service_zones column of the shops table.\n\nKey areas to investigate:\n- Verify the JSONB format of service_zones in the database schema\n- Check if formData.serviceZones is properly formatted before saving\n- Confirm that the conditional logic (formData.isMobile ? formData.serviceZones : null) is working as expected\n- Examine database logs for any errors during save operations\n- Test if the JSONB data is being properly retrieved and parsed when loading shop data\n</info added on 2025-09-29T18:13:23.030Z>\n<info added on 2025-09-29T18:14:17.965Z>\n## Root Cause Identified\n\nFound the property name inconsistency between onboarding and dashboard:\n\n1. In onboarding (ShopInfoStep.tsx): zones are stored in `formData.serviceZones` and saved to the `service_zones` column in the database\n2. In dashboard (Settings.tsx): zones are read from `shopData?.serviceAreas` (line 117) but saved to `serviceZones` (line 447)\n\nThis naming mismatch causes the zones to not persist properly. The onboarding flow correctly saves to the `service_zones` column, but the dashboard attempts to read from a non-existent `serviceAreas` property instead of `serviceZones`.\n\n## Required Fixes:\n\n1. Standardize property naming across the application:\n   - Either rename all instances of `serviceAreas` to `serviceZones`\n   - Or rename all instances of `serviceZones` to `serviceAreas`\n\n2. Update the data retrieval in Settings.tsx to use the correct property name\n\n3. Verify that both onboarding and dashboard components are reading from and writing to the same database column (`service_zones`)\n\n4. Add data migration if necessary for any existing shops with inconsistent data\n</info added on 2025-09-29T18:14:17.965Z>",
        "testStrategy": "1. Write unit tests for the save and load functions\n2. Test with various combinations of selected zones\n3. Verify data is correctly stored in the database\n4. Test error scenarios (network failure, validation errors)\n5. Create an end-to-end test that completes the onboarding flow and verifies zones are saved\n6. Test that zones appear correctly in the shop profile after onboarding",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Fix Shop Address Alignment in Booking Form",
        "description": "Correct the alignment of the shop address in the booking form to ensure consistent leading alignment with other elements.",
        "details": "1. Locate the booking form component\n2. Identify the shop address display element\n3. Update the CSS/Tailwind classes to ensure consistent leading (left) alignment\n4. Verify the alignment is consistent across different screen sizes\n\nImplementation example:\n```tsx\n// Before\n<div className=\"flex justify-center\"> {/* or similar centering class */}\n  <p className=\"text-center\">{shop.address}</p> {/* centered text */}\n</div>\n\n// After\n<div className=\"flex justify-start\"> {/* or remove flex justify if not needed */}\n  <p className=\"text-left\">{shop.address}</p> {/* or remove text-* class as text is left-aligned by default */}\n</div>\n```\n\nAlternatively with Tailwind:\n```tsx\n// Before\n<p className=\"text-center mx-auto\">{shop.address}</p>\n\n// After\n<p className=\"text-left\">{shop.address}</p>\n```\n\nEnsure this change is consistent with the design system and other form elements.\n<info added on 2025-09-29T18:16:49.249Z>\n## Investigation Results\n\nAfter investigating the shop address alignment in BookingFlowNew.tsx (lines 583-588), no alignment issues were found in the current implementation. The shop address is already properly aligned using `flex items-center space-x-1` classes, which provides correct left-alignment consistent with other elements in the form. The address display has proper flex alignment and spacing in its container.\n\nThis task appears to be addressing an issue that has already been resolved in the current implementation, or the issue may have been incorrectly identified. No CSS/Tailwind class changes are needed for the shop address alignment in the booking form.\n</info added on 2025-09-29T18:16:49.249Z>",
        "testStrategy": "1. Visual inspection of the booking form to verify address alignment\n2. Test on different screen sizes to ensure responsive behavior\n3. Compare with other form elements to confirm consistent alignment\n4. Verify the change doesn't break any other layout elements\n5. Conduct a brief user test to confirm the improved readability",
        "priority": "low",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-29T17:51:54.730Z",
      "updated": "2025-09-29T18:16:52.919Z",
      "description": "Tasks for master context"
    }
  }
}