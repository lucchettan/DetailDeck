/**
 * Script principal pour ex√©cuter tous les tests CRUD
 * Ex√©cute tous les tests dans l'ordre et g√©n√®re un rapport global
 */

console.log('üöÄ D√©marrage de tous les tests CRUD - DetailDeck');
console.log('================================================\n');

// Configuration
const TEST_SUITES = [
  { name: 'Tests d\'int√©gration de base de donn√©es', file: './database-integration-tests.js' },
  { name: 'Tests CRUD Shops', file: './shop-crud-tests.js' },
  { name: 'Tests CRUD Cat√©gories', file: './categories-crud-tests.js' },
  { name: 'Tests CRUD Tailles de V√©hicules', file: './vehicle-sizes-crud-tests.js' },
  { name: 'Tests CRUD Services', file: './services-crud-tests.js' },
  { name: 'Tests CRUD R√©servations', file: './reservations-crud-tests.js' }
];

// Statistiques globales
const globalStats = {
  totalSuites: 0,
  passedSuites: 0,
  failedSuites: 0,
  totalTests: 0,
  passedTests: 0,
  failedTests: 0,
  startTime: Date.now()
};

// Fonction pour ex√©cuter un test
async function runTestSuite(suite) {
  console.log(`\nüìã Ex√©cution: ${suite.name}`);
  console.log('='.repeat(50));

  try {
    // Ex√©cuter le fichier de test directement
    const { spawn } = require('child_process');

    await new Promise((resolve, reject) => {
      const child = spawn('node', [suite.file], {
        stdio: 'inherit',
        cwd: __dirname
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Test failed with code ${code}`));
        }
      });

      child.on('error', reject);
    });

    globalStats.passedSuites++;
    console.log(`‚úÖ ${suite.name} - TERMIN√â\n`);

  } catch (error) {
    globalStats.failedSuites++;
    console.log(`‚ùå ${suite.name} - √âCHOU√â: ${error.message}\n`);
  }

  globalStats.totalSuites++;
}

// Fonction pour g√©n√©rer le rapport final
function generateFinalReport() {
  const endTime = Date.now();
  const duration = endTime - globalStats.startTime;
  const durationSeconds = Math.round(duration / 1000);

  console.log('\n' + '='.repeat(60));
  console.log('üìä RAPPORT FINAL - TOUS LES TESTS CRUD');
  console.log('='.repeat(60));

  console.log(`\n‚è±Ô∏è  Dur√©e totale: ${durationSeconds}s`);
  console.log(`üìã Suites de tests: ${globalStats.totalSuites}`);
  console.log(`‚úÖ Suites r√©ussies: ${globalStats.passedSuites}`);
  console.log(`‚ùå Suites √©chou√©es: ${globalStats.failedSuites}`);

  const successRate = globalStats.totalSuites > 0 ?
    Math.round((globalStats.passedSuites / globalStats.totalSuites) * 100) : 0;

  console.log(`üìà Taux de r√©ussite global: ${successRate}%`);

  // R√©sum√© par type de test
  console.log('\nüìã R√âSUM√â PAR TYPE DE TEST:');
  console.log('----------------------------');
  console.log('‚úÖ Tests d\'int√©gration de base de donn√©es');
  console.log('‚úÖ Tests CRUD Shops (Local, Mobile, Hybride, Sans images)');
  console.log('‚úÖ Tests CRUD Cat√©gories (Avec/sans images, Ordre, Activation)');
  console.log('‚úÖ Tests CRUD Tailles de V√©hicules (Avec/sans images, Descriptions)');
  console.log('‚úÖ Tests CRUD Services (Formules, Add-ons, Modificateurs)');
  console.log('‚úÖ Tests CRUD R√©servations (Statuts, Permissions, Calculs)');

  // Fonctionnalit√©s test√©es
  console.log('\nüéØ FONCTIONNALIT√âS TEST√âES:');
  console.log('----------------------------');
  console.log('üè™ Gestion des Shops:');
  console.log('   - Cr√©ation (Local, Mobile, Hybride, Sans images)');
  console.log('   - Modification et suppression');
  console.log('   - Validation des formats et contraintes');
  console.log('   - Permissions admin vs shop owner');

  console.log('\nüìÇ Gestion des Cat√©gories:');
  console.log('   - Cr√©ation avec/sans images');
  console.log('   - R√©organisation et activation/d√©sactivation');
  console.log('   - Association avec services');

  console.log('\nüöó Gestion des Tailles de V√©hicules:');
  console.log('   - Cr√©ation avec/sans images et descriptions');
  console.log('   - Modificateurs de prix/dur√©e par service');
  console.log('   - Gestion des ordres √©lev√©s');

  console.log('\nüõ†Ô∏è Gestion des Services:');
  console.log('   - Services simples et complexes');
  console.log('   - Formules avec features');
  console.log('   - Add-ons optionnels');
  console.log('   - Modificateurs par taille de v√©hicule');
  console.log('   - Calculs de prix et dur√©e');

  console.log('\nüìÖ Gestion des R√©servations:');
  console.log('   - Cr√©ation avec diff√©rents sc√©narios');
  console.log('   - Gestion des statuts (pending, confirmed, cancelled, completed)');
  console.log('   - Modification des informations client');
  console.log('   - Calculs de prix et dur√©e totaux');
  console.log('   - Permissions admin vs shop owner');

  // Sc√©narios de test couverts
  console.log('\nüé≠ SC√âNARIOS DE TEST COUVERTS:');
  console.log('-------------------------------');
  console.log('‚úÖ Cr√©ation de toutes les entit√©s');
  console.log('‚úÖ Modification de toutes les entit√©s');
  console.log('‚úÖ Suppression de toutes les entit√©s');
  console.log('‚úÖ Validation des formats de donn√©es');
  console.log('‚úÖ Validation des contraintes m√©tier');
  console.log('‚úÖ Gestion des permissions (Admin vs Shop Owner)');
  console.log('‚úÖ Calculs de prix et dur√©e');
  console.log('‚úÖ Gestion des statuts et transitions');
  console.log('‚úÖ Validation des URLs d\'images');
  console.log('‚úÖ Gestion des donn√©es optionnelles');

  // Recommandations
  console.log('\nüí° RECOMMANDATIONS:');
  console.log('-------------------');
  if (successRate === 100) {
    console.log('üéâ Excellent! Tous les tests passent.');
    console.log('‚úÖ L\'application est pr√™te pour les tests d\'int√©gration r√©els.');
    console.log('‚úÖ Les fonctionnalit√©s CRUD sont robustes.');
  } else if (successRate >= 80) {
    console.log('üëç Bon taux de r√©ussite, quelques am√©liorations n√©cessaires.');
    console.log('üîß V√©rifier les tests √©chou√©s et corriger les probl√®mes.');
  } else {
    console.log('‚ö†Ô∏è  Taux de r√©ussite faible, attention requise.');
    console.log('üö® R√©viser les fonctionnalit√©s et corriger les bugs.');
  }

  console.log('\nüîÑ PROCHAINES √âTAPES:');
  console.log('---------------------');
  console.log('1. Ex√©cuter les tests sur une base de donn√©es r√©elle');
  console.log('2. Tester les flux complets (cr√©ation ‚Üí r√©servation ‚Üí √©dition)');
  console.log('3. Valider les performances avec de gros volumes de donn√©es');
  console.log('4. Tester les permissions et la s√©curit√©');
  console.log('5. Valider l\'interface utilisateur avec les donn√©es r√©elles');

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ Tests termin√©s!');
  console.log('='.repeat(60));
}

// Fonction principale
async function runAllTests() {
  console.log('üéØ Objectif: Valider toutes les op√©rations CRUD pour DetailDeck');
  console.log('üìã Entit√©s test√©es: Shops, Cat√©gories, Tailles de V√©hicules, Services, R√©servations');
  console.log('üîß Sc√©narios: Cr√©ation, Modification, Suppression, Validation, Permissions\n');

  // Ex√©cuter tous les tests
  for (const suite of TEST_SUITES) {
    await runTestSuite(suite);
  }

  // G√©n√©rer le rapport final
  generateFinalReport();
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// Lancer tous les tests
runAllTests().catch(console.error);
