/**
 * Tests CRUD pour la gestion des Cat√©gories de Services
 * Sc√©narios: Avec/sans images, ordre, activation/d√©sactivation
 */

console.log('üìÇ Tests CRUD - Gestion des Cat√©gories');

// Configuration des tests
const CATEGORY_SCENARIOS = {
  // Sc√©nario 1: Cat√©gorie avec image
  withImage: {
    name: 'Lavage Int√©rieur',
    description: 'Services de nettoyage et entretien de l\'habitacle',
    image: 'https://example.com/interior-category.jpg',
    order: 1,
    isActive: true
  },

  // Sc√©nario 2: Cat√©gorie sans image
  withoutImage: {
    name: 'Lavage Ext√©rieur',
    description: 'Services de nettoyage et protection de la carrosserie',
    image: null,
    order: 2,
    isActive: true
  },

  // Sc√©nario 3: Cat√©gorie d√©sactiv√©e
  inactive: {
    name: 'Services Sp√©ciaux',
    description: 'Services temporairement indisponibles',
    image: 'https://example.com/special-category.jpg',
    order: 3,
    isActive: false
  },

  // Sc√©nario 4: Cat√©gorie avec ordre √©lev√©
  highOrder: {
    name: 'Traitements C√©ramiques',
    description: 'Protection longue dur√©e de la peinture',
    image: 'https://example.com/ceramic-category.jpg',
    order: 10,
    isActive: true
  },

  // Sc√©nario 5: Cat√©gorie avec description longue
  longDescription: {
    name: 'D√©tail Complet Premium',
    description: 'Service complet incluant lavage int√©rieur et ext√©rieur, traitement des plastiques, nettoyage des jantes, aspiration compl√®te, shampoing des si√®ges, traitement des cuirs, protection c√©ramique et finition premium avec cire haute qualit√©.',
    image: 'https://example.com/premium-category.jpg',
    order: 4,
    isActive: true
  }
};

class CategoryCRUDTests {
  constructor() {
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
  }

  addTest(name, testFn) {
    this.tests.push({ name, testFn });
  }

  async runTests() {
    console.log('\nüöÄ D√©marrage des tests CRUD Cat√©gories...\n');

    for (const test of this.tests) {
      try {
        console.log(`üìã Test: ${test.name}`);
        await test.testFn();
        console.log(`‚úÖ ${test.name} - PASS√â\n`);
        this.passed++;
      } catch (error) {
        console.log(`‚ùå ${test.name} - √âCHOU√â: ${error.message}\n`);
        this.failed++;
      }
    }

    this.printSummary();
  }

  printSummary() {
    console.log('üìä R√âSUM√â DES TESTS CAT√âGORIES');
    console.log('==============================');
    console.log(`‚úÖ Tests pass√©s: ${this.passed}`);
    console.log(`‚ùå Tests √©chou√©s: ${this.failed}`);
    console.log(`üìà Taux de r√©ussite: ${Math.round((this.passed / (this.passed + this.failed)) * 100)}%`);
  }

  // Test 1: Cr√©ation d'une cat√©gorie avec image
  testCreateCategoryWithImage() {
    const category = CATEGORY_SCENARIOS.withImage;

    // Validation des champs requis
    if (!category.name || !category.description) {
      throw new Error('Champs requis manquants pour cat√©gorie avec image');
    }

    // Validation de l'image
    if (!category.image) {
      throw new Error('Cat√©gorie avec image doit avoir une URL d\'image');
    }

    // Validation de l'URL d'image
    try {
      new URL(category.image);
    } catch {
      throw new Error('URL d\'image invalide');
    }

    // Validation de l'ordre
    if (typeof category.order !== 'number' || category.order < 0) {
      throw new Error('Ordre de cat√©gorie invalide');
    }

    // Validation du statut actif
    if (typeof category.isActive !== 'boolean') {
      throw new Error('Statut actif doit √™tre un bool√©en');
    }

    console.log('   ‚úÖ Cat√©gorie avec image cr√©√©e avec succ√®s');
  }

  // Test 2: Cr√©ation d'une cat√©gorie sans image
  testCreateCategoryWithoutImage() {
    const category = CATEGORY_SCENARIOS.withoutImage;

    // Validation des champs requis
    if (!category.name || !category.description) {
      throw new Error('Champs requis manquants pour cat√©gorie sans image');
    }

    // Validation de l'absence d'image
    if (category.image !== null && category.image !== undefined) {
      throw new Error('Cat√©gorie sans image ne doit pas avoir d\'URL d\'image');
    }

    console.log('   ‚úÖ Cat√©gorie sans image cr√©√©e avec succ√®s');
  }

  // Test 3: Cr√©ation d'une cat√©gorie d√©sactiv√©e
  testCreateInactiveCategory() {
    const category = CATEGORY_SCENARIOS.inactive;

    // Validation des champs requis
    if (!category.name || !category.description) {
      throw new Error('Champs requis manquants pour cat√©gorie inactive');
    }

    // Validation du statut inactif
    if (category.isActive !== false) {
      throw new Error('Cat√©gorie inactive doit avoir isActive = false');
    }

    console.log('   ‚úÖ Cat√©gorie inactive cr√©√©e avec succ√®s');
  }

  // Test 4: Validation des formats de donn√©es
  testDataFormatValidation() {
    const category = CATEGORY_SCENARIOS.withImage;

    // Validation du format du nom
    if (typeof category.name !== 'string' || category.name.length < 2) {
      throw new Error('Nom de cat√©gorie invalide');
    }

    // Validation du format de la description
    if (typeof category.description !== 'string' || category.description.length < 10) {
      throw new Error('Description de cat√©gorie invalide');
    }

    // Validation du format de l'ordre
    if (!Number.isInteger(category.order)) {
      throw new Error('Ordre de cat√©gorie doit √™tre un entier');
    }

    // Validation du format du statut actif
    if (typeof category.isActive !== 'boolean') {
      throw new Error('Statut actif doit √™tre un bool√©en');
    }

    console.log('   ‚úÖ Formats de donn√©es valid√©s');
  }

  // Test 5: Validation des contraintes m√©tier
  testBusinessConstraints() {
    // Test contrainte: nom unique
    const categories = [
      CATEGORY_SCENARIOS.withImage,
      CATEGORY_SCENARIOS.withoutImage
    ];

    const names = categories.map(cat => cat.name);
    const uniqueNames = new Set(names);

    if (names.length !== uniqueNames.size) {
      throw new Error('Noms de cat√©gories doivent √™tre uniques');
    }

    // Test contrainte: ordre positif
    for (const category of categories) {
      if (category.order < 0) {
        throw new Error('Ordre de cat√©gorie doit √™tre positif');
      }
    }

    // Test contrainte: description minimum
    for (const category of categories) {
      if (category.description.length < 10) {
        throw new Error('Description de cat√©gorie trop courte');
      }
    }

    console.log('   ‚úÖ Contraintes m√©tier valid√©es');
  }

  // Test 6: Test de modification d'une cat√©gorie
  testUpdateCategory() {
    const originalCategory = CATEGORY_SCENARIOS.withImage;
    const updatedCategory = {
      ...originalCategory,
      name: 'Lavage Int√©rieur Premium',
      description: 'Services de nettoyage et entretien premium de l\'habitacle',
      order: 5,
      isActive: false
    };

    // Validation des modifications
    if (updatedCategory.name === originalCategory.name) {
      throw new Error('Nom de cat√©gorie non modifi√©');
    }

    if (updatedCategory.description === originalCategory.description) {
      throw new Error('Description de cat√©gorie non modifi√©e');
    }

    if (updatedCategory.order === originalCategory.order) {
      throw new Error('Ordre de cat√©gorie non modifi√©');
    }

    if (updatedCategory.isActive === originalCategory.isActive) {
      throw new Error('Statut actif non modifi√©');
    }

    console.log('   ‚úÖ Cat√©gorie modifi√©e avec succ√®s');
  }

  // Test 7: Test de suppression d'une cat√©gorie
  testDeleteCategory() {
    const category = CATEGORY_SCENARIOS.withoutImage;

    // Simulation de la suppression
    const deletedCategory = null;

    if (deletedCategory !== null) {
      throw new Error('Cat√©gorie non supprim√©e');
    }

    console.log('   ‚úÖ Cat√©gorie supprim√©e avec succ√®s');
  }

  // Test 8: Test de r√©organisation des cat√©gories
  testReorderCategories() {
    const categories = [
      { ...CATEGORY_SCENARIOS.withImage, order: 1 },
      { ...CATEGORY_SCENARIOS.withoutImage, order: 2 },
      { ...CATEGORY_SCENARIOS.inactive, order: 3 }
    ];

    // R√©organisation
    const reorderedCategories = categories.map((cat, index) => ({
      ...cat,
      order: index + 1
    }));

    // Validation de la r√©organisation
    for (let i = 0; i < reorderedCategories.length; i++) {
      if (reorderedCategories[i].order !== i + 1) {
        throw new Error('R√©organisation des cat√©gories √©chou√©e');
      }
    }

    console.log('   ‚úÖ Cat√©gories r√©organis√©es avec succ√®s');
  }

  // Test 9: Test de validation des URLs d'images
  testImageUrlValidation() {
    const category = CATEGORY_SCENARIOS.withImage;

    // Validation du format URL
    try {
      new URL(category.image);
    } catch {
      throw new Error('URL d\'image invalide');
    }

    // Validation de l'extension
    const validExtensions = ['.jpg', '.jpeg', '.png', '.webp'];
    const hasValidExtension = validExtensions.some(ext =>
      category.image.toLowerCase().includes(ext)
    );

    if (!hasValidExtension) {
      throw new Error('Extension d\'image non support√©e');
    }

    console.log('   ‚úÖ URL d\'image valid√©e');
  }

  // Test 10: Test des permissions admin
  testAdminPermissions() {
    const adminUser = {
      role: 'admin',
      permissions: ['category:read', 'category:write', 'category:delete', 'category:admin']
    };

    const shopOwner = {
      role: 'shop_owner',
      permissions: ['category:read', 'category:write']
    };

    // Validation des permissions admin
    if (!adminUser.permissions.includes('category:admin')) {
      throw new Error('Admin doit avoir les permissions d\'administration des cat√©gories');
    }

    // Validation des permissions shop owner
    if (shopOwner.permissions.includes('category:admin')) {
      throw new Error('Shop owner ne doit pas avoir les permissions d\'administration des cat√©gories');
    }

    console.log('   ‚úÖ Permissions valid√©es');
  }

  // Test 11: Test de gestion des cat√©gories avec services
  testCategoryWithServices() {
    const category = CATEGORY_SCENARIOS.withImage;
    const services = [
      { id: 'service1', name: 'Lavage Int√©rieur Standard', categoryId: category.id },
      { id: 'service2', name: 'Lavage Int√©rieur Premium', categoryId: category.id }
    ];

    // Validation de l'association cat√©gorie-services
    for (const service of services) {
      if (service.categoryId !== category.id) {
        throw new Error('Service non associ√© √† la bonne cat√©gorie');
      }
    }

    console.log('   ‚úÖ Association cat√©gorie-services valid√©e');
  }

  // Test 12: Test de validation des noms de cat√©gories
  testCategoryNameValidation() {
    const validNames = [
      'Lavage Int√©rieur',
      'Lavage Ext√©rieur',
      'Traitements C√©ramiques',
      'D√©tail Complet'
    ];

    const invalidNames = [
      '', // Nom vide
      'A', // Nom trop court
      'A'.repeat(101), // Nom trop long
      '   ', // Nom avec espaces uniquement
      null, // Nom null
      undefined // Nom undefined
    ];

    // Validation des noms valides
    for (const name of validNames) {
      if (typeof name !== 'string' || name.length < 2 || name.length > 100) {
        throw new Error(`Nom de cat√©gorie valide rejet√©: ${name}`);
      }
    }

    // Validation des noms invalides
    for (const name of invalidNames) {
      if (name && typeof name === 'string' && name.trim().length >= 2 && name.length <= 100) {
        throw new Error(`Nom de cat√©gorie invalide accept√©: ${name}`);
      }
    }

    console.log('   ‚úÖ Validation des noms de cat√©gories');
  }
}

// Ex√©cution des tests
async function runCategoryTests() {
  const testSuite = new CategoryCRUDTests();

  // Ajouter tous les tests
  testSuite.addTest('Cr√©ation cat√©gorie avec image', () => testSuite.testCreateCategoryWithImage());
  testSuite.addTest('Cr√©ation cat√©gorie sans image', () => testSuite.testCreateCategoryWithoutImage());
  testSuite.addTest('Cr√©ation cat√©gorie inactive', () => testSuite.testCreateInactiveCategory());
  testSuite.addTest('Validation formats de donn√©es', () => testSuite.testDataFormatValidation());
  testSuite.addTest('Contraintes m√©tier', () => testSuite.testBusinessConstraints());
  testSuite.addTest('Modification d\'une cat√©gorie', () => testSuite.testUpdateCategory());
  testSuite.addTest('Suppression d\'une cat√©gorie', () => testSuite.testDeleteCategory());
  testSuite.addTest('R√©organisation des cat√©gories', () => testSuite.testReorderCategories());
  testSuite.addTest('Validation URLs d\'images', () => testSuite.testImageUrlValidation());
  testSuite.addTest('Permissions admin', () => testSuite.testAdminPermissions());
  testSuite.addTest('Cat√©gorie avec services', () => testSuite.testCategoryWithServices());
  testSuite.addTest('Validation des noms', () => testSuite.testCategoryNameValidation());

  // Ex√©cuter les tests
  await testSuite.runTests();
}

// Lancer les tests
runCategoryTests().catch(console.error);
